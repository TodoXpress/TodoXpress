// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoXpress.Infastructure.Persistence.Contexts;

#nullable disable

namespace TodoXpress.Infastructure.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    partial class CalendarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Calendar")
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoXpress.Domain.Calendars.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Calendars", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSerialEvent")
                        .HasColumnType("boolean");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("SerialEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("ShowAs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("SerialEventId");

                    b.ToTable("Events", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("FileAttachments", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.SerialEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndOfSeries")
                        .HasColumnType("date");

                    b.Property<int>("Itterations")
                        .HasColumnType("integer");

                    b.Property<int>("MultiDaySerialEvent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SerialEvents", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Common.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("A")
                        .HasColumnType("integer");

                    b.Property<int>("B")
                        .HasColumnType("integer");

                    b.Property<int>("G")
                        .HasColumnType("integer");

                    b.Property<int>("R")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Color", "Calendar");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.Calendar", b =>
                {
                    b.HasOne("TodoXpress.Domain.Common.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoXpress.Domain.Calendars.User", "Owner")
                        .WithMany("Calendars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.CalendarEvent", b =>
                {
                    b.HasOne("TodoXpress.Domain.Calendars.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoXpress.Domain.Calendars.SerialEvent", "SerialEvent")
                        .WithMany("Events")
                        .HasForeignKey("SerialEventId");

                    b.Navigation("Calendar");

                    b.Navigation("SerialEvent");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.FileAttachment", b =>
                {
                    b.HasOne("TodoXpress.Domain.Calendars.CalendarEvent", "Event")
                        .WithMany("FileAttachments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.CalendarEvent", b =>
                {
                    b.Navigation("FileAttachments");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.SerialEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TodoXpress.Domain.Calendars.User", b =>
                {
                    b.Navigation("Calendars");
                });
#pragma warning restore 612, 618
        }
    }
}
